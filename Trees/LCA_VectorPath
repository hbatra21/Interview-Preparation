#include<bits/stdc++.h>
using namespace std;

struct node{
	node* left;
	node* right;
	int data;
};
node* newNode(int val)
{
 node *temp = new node;
 temp->data = val;
 temp->left = NULL;
 temp->right = NULL;
 return temp;
}
node* insert1(node* root, int val)
{
    if(!root) return newNode(val);
    if(root->data > val)
        root->left = insert1(root->left, val);
    else
        root->right = insert1(root->right, val);
    return root;

}
void inorder(node* root)
{
    if(root){
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}
int find1(node *root, int val, vector<int>&v1)
{
    if(!root) return 0;
    v1.push_back(root->data);
    if(root->data == val) return 1;
    if (((root->left)&&find1(root->left,val,v1))||(root->right&&find1(root->right,val,v1)))
        return 1;
    v1.pop_back();
    return 0;
}
int main()
{
	int n;
	int x ;
	int i;
	int val1;
	int val2;
	vector<int> v1;
	vector<int> v2;
	node* root = NULL;
	cin >> n;
	cin >> x;
	root = insert1(root, x);
	for (i = 0; i < n-1; i++) {
        int r;
        cin >> r;
        insert1(root, r);
	}
	inorder(root);
	cout << endl;
    cin >> val1 >> val2;
    if(!find1(root,val1,v1)||!find1(root,val2,v2))
        return -1;
    for(i = 0 ; i<int(v1.size())&& i<int(v2.size()); i++)
        if(v1[i]!=v2[i])
            break;
    cout << v1[i-1] << endl;
    return -2;
}
